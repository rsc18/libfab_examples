Begin optimization report for: main

LOOP BEGIN at src/example_tcp_rdm.c (102, 5)
LOOP END

LOOP BEGIN at src/example_tcp_rdm.c (118, 5)
    remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at src/example_tcp_rdm.c (85, 5)
LOOP END

LOOP BEGIN at src/example_tcp_rdm.c (118, 5)
    remark #15521: Loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
=================================================================

---- Begin Inlining Report ----
Option Values:
  inline-threshold: 225
  inlinehint-threshold: 325
  inlinecold-threshold: 45
  inlineoptsize-threshold: 15

DEAD STATIC FUNC: cleanup

DEAD STATIC FUNC: fi_allocinfo

DEAD STATIC FUNC: fi_av_insert

DEAD STATIC FUNC: fi_av_open

DEAD STATIC FUNC: fi_close

DEAD STATIC FUNC: fi_cq_open

DEAD STATIC FUNC: fi_cq_read

DEAD STATIC FUNC: fi_domain

DEAD STATIC FUNC: fi_enable

DEAD STATIC FUNC: fi_endpoint

DEAD STATIC FUNC: fi_ep_bind

DEAD STATIC FUNC: fi_recv

DEAD STATIC FUNC: fi_send

DEAD STATIC FUNC: initilize

DEAD STATIC FUNC: post_recv

DEAD STATIC FUNC: post_send

DEAD STATIC FUNC: run

DEAD STATIC FUNC: wait_cq

COMPILE FUNC: main
   -> INLINE: fi_allocinfo example_tcp_rdm.c(155,13)
   -> INLINE: initilize example_tcp_rdm.c(164,5)
      -> INLINE: fi_domain example_tcp_rdm.c(48,5)
      -> INLINE: fi_endpoint example_tcp_rdm.c(49,5)
      -> INLINE: fi_cq_open example_tcp_rdm.c(53,5)
      -> INLINE: fi_av_open example_tcp_rdm.c(60,5)
      -> INLINE: fi_av_insert example_tcp_rdm.c(63,9)
      -> INLINE: fi_ep_bind example_tcp_rdm.c(55,5)
      -> INLINE: fi_ep_bind example_tcp_rdm.c(65,5)
      -> INLINE: fi_enable example_tcp_rdm.c(67,5)
   -> INLINE: run example_tcp_rdm.c(165,5)
      -> INLINE: post_send example_tcp_rdm.c(136,9)
         -> INLINE: fi_send example_tcp_rdm.c(103,15)
         -> INLINE: fi_cq_read example_tcp_rdm.c(109,20)
      -> INLINE: wait_cq example_tcp_rdm.c(138,9)
         -> INLINE: fi_cq_read example_tcp_rdm.c(119,15)
      -> INLINE: post_recv example_tcp_rdm.c(143,9)
         -> INLINE: fi_recv example_tcp_rdm.c(86,15)
         -> INLINE: fi_cq_read example_tcp_rdm.c(93,20)
      -> INLINE: wait_cq example_tcp_rdm.c(145,9)
         -> INLINE: fi_cq_read example_tcp_rdm.c(119,15)
   -> INLINE: cleanup example_tcp_rdm.c(166,5)
      -> INLINE: fi_close example_tcp_rdm.c(74,5)
      -> INLINE: fi_close example_tcp_rdm.c(75,5)
      -> INLINE: fi_close example_tcp_rdm.c(76,5)
      -> INLINE: fi_close example_tcp_rdm.c(77,5)
      -> INLINE: fi_close example_tcp_rdm.c(78,5)

---- End Inlining Report ------
Register allocation report for: main
FUNCTION BEGIN
 LOOP1 BEGIN at (src/example_tcp_rdm.c:118:5 @[ src/example_tcp_rdm.c:145:9 @[ src/example_tcp_rdm.c:165:5 ] ])
 LOOP1 END
 LOOP1 BEGIN at (src/example_tcp_rdm.c:92:12 @[ src/example_tcp_rdm.c:143:9 @[ src/example_tcp_rdm.c:165:5 ] ])
 LOOP1 END
 LOOP1 BEGIN at (src/example_tcp_rdm.c:118:5 @[ src/example_tcp_rdm.c:138:9 @[ src/example_tcp_rdm.c:165:5 ] ])
 LOOP1 END
 LOOP1 BEGIN at (src/example_tcp_rdm.c:108:12 @[ src/example_tcp_rdm.c:136:9 @[ src/example_tcp_rdm.c:165:5 ] ])
 LOOP1 END

Hardware registers used
 Reserved : 3 [ mxcsr rsp ssp  ]
 Available : 36 [ r11 zmm1 zmm2 zmm3 zmm4 zmm5 zmm6 zmm7 zmm8 zmm9 zmm10 zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0_k1 k2_k3 k4_k5 k6_k7  ]
 Callee Saved : 6 [ rbp rbx r12 r13 r14 r15  ]
 Assigned : 16 [ eflags rax rbp rbx rcx rdi rdx rsi r8 r9 r10 r12 r13 r14 r15 zmm0  ]

Routine stack 
 Variables : 144 Bytes
   Read Count : 4
   Write Count : 10
 Spills : 0 Bytes
   Read Count : 0
   Write Count : 0

FUNCTION END
